name: Build and test

on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - develop
      - 'wheel/**'
      - 'runci/**'
  release:
    types:
      - created
      - edited
  schedule:
    # 04:00 every Tuesday morning
    - cron: '0 4 * * 2'

env:
  IQSHARP_TELEMETRY_OPT_OUT: 1
  PYTKET_REMOTE_QSHARP_RESOURCE_ID: ${{ secrets.PYTKET_REMOTE_QSHARP_RESOURCE_ID }}
  PYTKET_REMOTE_QSHARP_LOCATION: ${{ secrets.PYTKET_REMOTE_QSHARP_LOCATION }}
  PYTKET_REMOTE_QSHARP_STORAGE: ${{ secrets.PYTKET_REMOTE_QSHARP_STORAGE }}
  AZURE_TENANT_ID: ${{ secrets.PYTKET_REMOTE_QSHARP_AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.PYTKET_REMOTE_QSHARP_AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.PYTKET_REMOTE_QSHARP_AZURE_CLIENT_SECRET }}

jobs:
  qsharp-checks:
    name: Qsharp - Build and test module
    strategy:
      matrix:
        os: ['ubuntu-22.04', 'macos-12', 'windows-2022']
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: '0'
    - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/* +refs/heads/*:refs/remotes/origin/*

    - name: Install dotnet SDK - ubuntu
      if: ${{ matrix.os == 'ubuntu-22.04' }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
    - name: Install iqsharp  - ubuntu
      if: ${{ matrix.os == 'ubuntu-22.04' }}
      run: |
        dotnet tool install -g Microsoft.Quantum.IQSharp
        dotnet iqsharp install --user

    - name: Install dotnet SDK - mac os
      if: ${{ matrix.os == 'macos-12' }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
    - name: Install iqsharp - mac os
      if: ${{ matrix.os == 'macos-12' }}
      run: |
        brew install mono-libgdiplus jupyter
        dotnet tool install -g Microsoft.Quantum.IQSharp
        dotnet iqsharp install

    - name: Install dotnet SDK  - windows
      if: ${{ matrix.os == 'windows-2022' }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
    - name: Install iqsharp - windows
      if: ${{ matrix.os == 'windows-2022' }}
      run: |
        dotnet tool install -g Microsoft.Quantum.IQSharp
        dotnet iqsharp install --user

    - name: Set up Python 3.8
      if: github.event_name == 'push' || github.event_name == 'schedule'
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    - name: Build and test (3.8)
      if: github.event_name == 'push' || github.event_name == 'schedule'
      shell: bash
      run: |
        ./.github/workflows/build-test nomypy
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Build and test including remote checks (3.9) mypy
      if:  (matrix.os == 'macos-12') && (github.event_name == 'push' || (github.event_name == 'pull_request' &&  github.event.pull_request.head.repo.full_name == github.repository) || github.event_name == 'release' || github.event_name == 'schedule' )
      shell: bash
      run: |
        ./.github/workflows/build-test mypy
      env:
        PYTKET_RUN_REMOTE_TESTS: 1
    - name: Build and test including remote checks (3.9) nomypy
      if:  (matrix.os != 'macos-12') && (github.event_name == 'push' || (github.event_name == 'pull_request' &&  github.event.pull_request.head.repo.full_name == github.repository) || github.event_name == 'release' || github.event_name == 'schedule')
      shell: bash
      run: |
        ./.github/workflows/build-test nomypy
      env:
        PYTKET_RUN_REMOTE_TESTS: 1
    - name: Set up Python 3.10
      if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'schedule'
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Build and test (3.10)
      if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'schedule'
      shell: bash
      run: |
        ./.github/workflows/build-test nomypy
    - uses: actions/upload-artifact@v3
      if: github.event_name == 'release' || contains(github.ref, 'refs/heads/wheel')
      with:
        name: artefacts
        path: wheelhouse/
    - name: Install docs dependencies
      if:  (matrix.os == 'ubuntu-22.04') && (github.event_name == 'pull_request' || github.event_name == 'schedule' )
      run: |
        pip install -r .github/workflows/docs/requirements.txt
    - name: Build docs
      if:  (matrix.os == 'ubuntu-22.04') && (github.event_name == 'pull_request' || github.event_name == 'schedule' )
      timeout-minutes: 20
      run: |
        ./.github/workflows/docs/check-build-docs


  publish_to_pypi:
    name: Publish to pypi
    if: github.event_name == 'release'
    needs: qsharp-checks
    runs-on: ubuntu-22.04
    steps:
    - name: Download all wheels
      uses: actions/download-artifact@v3
      with:
        path: wheelhouse
    - name: Put them all in the dist folder
      run: |
        mkdir dist
        for w in `find wheelhouse/ -type f -name "*.whl"` ; do cp $w dist/ ; done
    - name: Publish wheels
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_PYTKET_QSHARP_API_TOKEN }}
        verbose: true

  docs:
    name: Build and publish docs
    if: github.event_name == 'release'
    needs: publish_to_pypi
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: '0'
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Download all wheels
      uses: actions/download-artifact@v3
      with:
        path: wheelhouse
    - name: Install pip, wheel
      run: pip install -U pip wheel jupyterlab
    - name: Install extensions
      run: for w in `find wheelhouse/ -type f -name "*.whl"` ; do pip install $w ; done
    - name: Install dotnet SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
    - name: Install iqsharp
      run: |
        dotnet tool install -g Microsoft.Quantum.IQSharp
        dotnet iqsharp install --user
    - name: Install docs dependencies
      run: |
        pip install -r .github/workflows/docs/requirements.txt
    - name: Build docs
      timeout-minutes: 20
      run: |
        cd .github/workflows/docs
        mkdir extensions
        ./build-docs -d ${GITHUB_WORKSPACE}/.github/workflows/docs/extensions
    - name: Configure git
      run: |
        git config --global user.email "tket-bot@cambridgequantum.com"
        git config --global user.name  "«$GITHUB_WORKFLOW» github action"
    - name: Check out gh-pages branch
      run: git checkout gh-pages
    - name: Remove old docs
      run: git rm -r --ignore-unmatch docs/api
    - name: Add generated docs to repository
      run: |
        mkdir -p docs
        mv .github/workflows/docs/extensions docs/api
        git add -f docs/api
        git commit --allow-empty -m "Add generated documentation."
    - name: Publish docs
      run:  git push origin gh-pages:gh-pages
